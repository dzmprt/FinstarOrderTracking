/* tslint:disable */
/* eslint-disable */
/**
 * FOSDIA.Registration API
 * Finstar order tracking API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CreateOrderCommand
 */
export interface CreateOrderCommand {
    /**
     * 
     * @type {string}
     * @memberof CreateOrderCommand
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface OrderDto
 */
export interface OrderDto {
    /**
     * 
     * @type {string}
     * @memberof OrderDto
     */
    'orderNumber': string;
    /**
     * 
     * @type {string}
     * @memberof OrderDto
     */
    'description': string;
    /**
     * 
     * @type {number}
     * @memberof OrderDto
     */
    'status': OrderDtoStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof OrderDto
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof OrderDto
     */
    'updatedAt'?: string | null;
}

export const OrderDtoStatusEnum = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4
} as const;

export type OrderDtoStatusEnum = typeof OrderDtoStatusEnum[keyof typeof OrderDtoStatusEnum];

/**
 * 
 * @export
 * @interface UpdateOrderStatusCommand
 */
export interface UpdateOrderStatusCommand {
    /**
     * 
     * @type {string}
     * @memberof UpdateOrderStatusCommand
     */
    'orderNumber'?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateOrderStatusCommand
     */
    'newStatus'?: UpdateOrderStatusCommandNewStatusEnum;
}

export const UpdateOrderStatusCommandNewStatusEnum = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4
} as const;

export type UpdateOrderStatusCommandNewStatusEnum = typeof UpdateOrderStatusCommandNewStatusEnum[keyof typeof UpdateOrderStatusCommandNewStatusEnum];


/**
 * AppInfoApi - axios parameter creator
 * @export
 */
export const AppInfoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        version: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/app-info/version`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Who am i
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        whoAmI: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/app-info/who-am-i`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppInfoApi - functional programming interface
 * @export
 */
export const AppInfoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AppInfoApiAxiosParamCreator(configuration)
    return {
        /**
         * Version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async version(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.version(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AppInfoApi.version']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Who am i
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async whoAmI(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.whoAmI(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AppInfoApi.whoAmI']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AppInfoApi - factory interface
 * @export
 */
export const AppInfoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AppInfoApiFp(configuration)
    return {
        /**
         * Version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        version(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.version(options).then((request) => request(axios, basePath));
        },
        /**
         * Who am i
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        whoAmI(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.whoAmI(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AppInfoApi - object-oriented interface
 * @export
 * @class AppInfoApi
 * @extends {BaseAPI}
 */
export class AppInfoApi extends BaseAPI {
    /**
     * Version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppInfoApi
     */
    public version(options?: RawAxiosRequestConfig) {
        return AppInfoApiFp(this.configuration).version(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Who am i
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppInfoApi
     */
    public whoAmI(options?: RawAxiosRequestConfig) {
        return AppInfoApiFp(this.configuration).whoAmI(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OrdersApi - axios parameter creator
 * @export
 */
export const OrdersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get orders by filter.
         * @param {number} limit 
         * @param {number} [offset] 
         * @param {string} [freeText] 
         * @param {Array<ApiV1OrdersGetOrderStatusEnum>} [orderStatus] 
         * @param {string} [createdFrom] 
         * @param {string} [createdTo] 
         * @param {string} [updatedFrom] 
         * @param {string} [updatedTo] 
         * @param {ApiV1OrdersGetOrderByEnum} [orderBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrdersGet: async (limit: number, offset?: number, freeText?: string, orderStatus?: Array<ApiV1OrdersGetOrderStatusEnum>, createdFrom?: string, createdTo?: string, updatedFrom?: string, updatedTo?: string, orderBy?: ApiV1OrdersGetOrderByEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'limit' is not null or undefined
            assertParamExists('apiV1OrdersGet', 'limit', limit)
            const localVarPath = `/api/v1/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (freeText !== undefined) {
                localVarQueryParameter['freeText'] = freeText;
            }

            if (orderStatus) {
                localVarQueryParameter['orderStatus'] = orderStatus;
            }

            if (createdFrom !== undefined) {
                localVarQueryParameter['createdFrom'] = (createdFrom as any instanceof Date) ?
                    (createdFrom as any).toISOString() :
                    createdFrom;
            }

            if (createdTo !== undefined) {
                localVarQueryParameter['createdTo'] = (createdTo as any instanceof Date) ?
                    (createdTo as any).toISOString() :
                    createdTo;
            }

            if (updatedFrom !== undefined) {
                localVarQueryParameter['updatedFrom'] = (updatedFrom as any instanceof Date) ?
                    (updatedFrom as any).toISOString() :
                    updatedFrom;
            }

            if (updatedTo !== undefined) {
                localVarQueryParameter['updatedTo'] = (updatedTo as any instanceof Date) ?
                    (updatedTo as any).toISOString() :
                    updatedTo;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get order by id.
         * @param {string} orderNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrdersOrderNumberGet: async (orderNumber: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderNumber' is not null or undefined
            assertParamExists('apiV1OrdersOrderNumberGet', 'orderNumber', orderNumber)
            const localVarPath = `/api/v1/orders/{orderNumber}`
                .replace(`{${"orderNumber"}}`, encodeURIComponent(String(orderNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update order.
         * @param {string} orderNumber 
         * @param {UpdateOrderStatusCommand} updateOrderStatusCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrdersOrderNumberStatusPatch: async (orderNumber: string, updateOrderStatusCommand: UpdateOrderStatusCommand, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderNumber' is not null or undefined
            assertParamExists('apiV1OrdersOrderNumberStatusPatch', 'orderNumber', orderNumber)
            // verify required parameter 'updateOrderStatusCommand' is not null or undefined
            assertParamExists('apiV1OrdersOrderNumberStatusPatch', 'updateOrderStatusCommand', updateOrderStatusCommand)
            const localVarPath = `/api/v1/orders/{orderNumber}/status`
                .replace(`{${"orderNumber"}}`, encodeURIComponent(String(orderNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateOrderStatusCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create order.
         * @param {CreateOrderCommand} createOrderCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrdersPost: async (createOrderCommand: CreateOrderCommand, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createOrderCommand' is not null or undefined
            assertParamExists('apiV1OrdersPost', 'createOrderCommand', createOrderCommand)
            const localVarPath = `/api/v1/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createOrderCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrdersApi - functional programming interface
 * @export
 */
export const OrdersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrdersApiAxiosParamCreator(configuration)
    return {
        /**
         * Get orders by filter.
         * @param {number} limit 
         * @param {number} [offset] 
         * @param {string} [freeText] 
         * @param {Array<ApiV1OrdersGetOrderStatusEnum>} [orderStatus] 
         * @param {string} [createdFrom] 
         * @param {string} [createdTo] 
         * @param {string} [updatedFrom] 
         * @param {string} [updatedTo] 
         * @param {ApiV1OrdersGetOrderByEnum} [orderBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OrdersGet(limit: number, offset?: number, freeText?: string, orderStatus?: Array<ApiV1OrdersGetOrderStatusEnum>, createdFrom?: string, createdTo?: string, updatedFrom?: string, updatedTo?: string, orderBy?: ApiV1OrdersGetOrderByEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrderDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrdersGet(limit, offset, freeText, orderStatus, createdFrom, createdTo, updatedFrom, updatedTo, orderBy, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrdersApi.apiV1OrdersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get order by id.
         * @param {string} orderNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OrdersOrderNumberGet(orderNumber: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrdersOrderNumberGet(orderNumber, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrdersApi.apiV1OrdersOrderNumberGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update order.
         * @param {string} orderNumber 
         * @param {UpdateOrderStatusCommand} updateOrderStatusCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OrdersOrderNumberStatusPatch(orderNumber: string, updateOrderStatusCommand: UpdateOrderStatusCommand, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrdersOrderNumberStatusPatch(orderNumber, updateOrderStatusCommand, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrdersApi.apiV1OrdersOrderNumberStatusPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create order.
         * @param {CreateOrderCommand} createOrderCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OrdersPost(createOrderCommand: CreateOrderCommand, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrdersPost(createOrderCommand, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrdersApi.apiV1OrdersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OrdersApi - factory interface
 * @export
 */
export const OrdersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrdersApiFp(configuration)
    return {
        /**
         * Get orders by filter.
         * @param {number} limit 
         * @param {number} [offset] 
         * @param {string} [freeText] 
         * @param {Array<ApiV1OrdersGetOrderStatusEnum>} [orderStatus] 
         * @param {string} [createdFrom] 
         * @param {string} [createdTo] 
         * @param {string} [updatedFrom] 
         * @param {string} [updatedTo] 
         * @param {ApiV1OrdersGetOrderByEnum} [orderBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrdersGet(limit: number, offset?: number, freeText?: string, orderStatus?: Array<ApiV1OrdersGetOrderStatusEnum>, createdFrom?: string, createdTo?: string, updatedFrom?: string, updatedTo?: string, orderBy?: ApiV1OrdersGetOrderByEnum, options?: RawAxiosRequestConfig): AxiosPromise<Array<OrderDto>> {
            return localVarFp.apiV1OrdersGet(limit, offset, freeText, orderStatus, createdFrom, createdTo, updatedFrom, updatedTo, orderBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Get order by id.
         * @param {string} orderNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrdersOrderNumberGet(orderNumber: string, options?: RawAxiosRequestConfig): AxiosPromise<OrderDto> {
            return localVarFp.apiV1OrdersOrderNumberGet(orderNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Update order.
         * @param {string} orderNumber 
         * @param {UpdateOrderStatusCommand} updateOrderStatusCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrdersOrderNumberStatusPatch(orderNumber: string, updateOrderStatusCommand: UpdateOrderStatusCommand, options?: RawAxiosRequestConfig): AxiosPromise<OrderDto> {
            return localVarFp.apiV1OrdersOrderNumberStatusPatch(orderNumber, updateOrderStatusCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * Create order.
         * @param {CreateOrderCommand} createOrderCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrdersPost(createOrderCommand: CreateOrderCommand, options?: RawAxiosRequestConfig): AxiosPromise<OrderDto> {
            return localVarFp.apiV1OrdersPost(createOrderCommand, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrdersApi - object-oriented interface
 * @export
 * @class OrdersApi
 * @extends {BaseAPI}
 */
export class OrdersApi extends BaseAPI {
    /**
     * Get orders by filter.
     * @param {number} limit 
     * @param {number} [offset] 
     * @param {string} [freeText] 
     * @param {Array<ApiV1OrdersGetOrderStatusEnum>} [orderStatus] 
     * @param {string} [createdFrom] 
     * @param {string} [createdTo] 
     * @param {string} [updatedFrom] 
     * @param {string} [updatedTo] 
     * @param {ApiV1OrdersGetOrderByEnum} [orderBy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public apiV1OrdersGet(limit: number, offset?: number, freeText?: string, orderStatus?: Array<ApiV1OrdersGetOrderStatusEnum>, createdFrom?: string, createdTo?: string, updatedFrom?: string, updatedTo?: string, orderBy?: ApiV1OrdersGetOrderByEnum, options?: RawAxiosRequestConfig) {
        return OrdersApiFp(this.configuration).apiV1OrdersGet(limit, offset, freeText, orderStatus, createdFrom, createdTo, updatedFrom, updatedTo, orderBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get order by id.
     * @param {string} orderNumber 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public apiV1OrdersOrderNumberGet(orderNumber: string, options?: RawAxiosRequestConfig) {
        return OrdersApiFp(this.configuration).apiV1OrdersOrderNumberGet(orderNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update order.
     * @param {string} orderNumber 
     * @param {UpdateOrderStatusCommand} updateOrderStatusCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public apiV1OrdersOrderNumberStatusPatch(orderNumber: string, updateOrderStatusCommand: UpdateOrderStatusCommand, options?: RawAxiosRequestConfig) {
        return OrdersApiFp(this.configuration).apiV1OrdersOrderNumberStatusPatch(orderNumber, updateOrderStatusCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create order.
     * @param {CreateOrderCommand} createOrderCommand 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public apiV1OrdersPost(createOrderCommand: CreateOrderCommand, options?: RawAxiosRequestConfig) {
        return OrdersApiFp(this.configuration).apiV1OrdersPost(createOrderCommand, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ApiV1OrdersGetOrderStatusEnum = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4
} as const;
export type ApiV1OrdersGetOrderStatusEnum = typeof ApiV1OrdersGetOrderStatusEnum[keyof typeof ApiV1OrdersGetOrderStatusEnum];
/**
 * @export
 */
export const ApiV1OrdersGetOrderByEnum = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4
} as const;
export type ApiV1OrdersGetOrderByEnum = typeof ApiV1OrdersGetOrderByEnum[keyof typeof ApiV1OrdersGetOrderByEnum];


